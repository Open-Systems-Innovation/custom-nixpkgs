#+title: Custom Nixpkgs Overlay for OSI 

This repository contains Nix packages used internally at OSI and not available on nixpkgs. These packages are not merged with nixpkgs because:
 1. They are only useful for very specific projects (e.g. a specific compilation of a library)
 2. They are only used in the internal work flow of OSI.
* List of packages
** dev-env
Creates a standard development environment for OSI simulation projects.
** firedrake
[[https://www.firedrakeproject.org/][Firedrake]] is an automated system for the solution of partial differential equations used in the finite element method.
** hello-nix
A simple example program for packaging programs for custom-nixpkgs
** hypre
A library of high performance predonditioners and solvers featuring multigrid methods for the solution of large, sparse linear systems of equations on massively parallel computers.
** libspatialindex
libspatialindex probides an extensible framework for spatial indexing, spatial queries, user-friendly interfaces for data management, customization of index characteristics, and index persistence for both internal and external memory structures.
** mpi4py
mpi4py provides MPI bindings for the Python programming language, allowing python programs to exploit multiple processors.
** petsc
PETSc is for the scalable solution of partial differential equations. 
** pylit
A tool for literate programming. Used in the demo files of firedrake
** recursivenodes
Creates nodes for the polynomial interpolation on the simplex in arbitrary dimensions.
** scotch
Scotch is a software packaging library for graph and mesh/hypergraph partitioning, graph clustering, and sparse matrix ordering.


* Using this repository
To use this repository, create a new flake.nix file, and add the following into the inputs:

#+BEGIN_SRC nix
  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
    custom-nixpkgs.url = "github:Open-Systems-Innovation/custom-nixpkgs";
  };
#+END_SRC

Now you can consume the overlay in a ~let ... in~ statement right after the inputs of your ~outputs~ funciton:

#+BEGIN_SRC nix
  outputs = { self, nixpkgs, custom-nixpkgs, ... }:
      let
        system = "x86_64-linux";
        pkgs = import nixpkgs {
          inherit system;
          overlays = [ custom-nixpkgs.overlays.default ];
        };
      in
#+END_SRC

Now you can use this in a ~devShell~ or a ~buildInput~ as you like:

#+BEGIN_SRC nix
   devShells.${system}.default = pkgs.mkShell {
     name = "default";
        
     packages = [
     # General packages
       pkgs.hello-nix
     ];
   };
#+END_SRC

* Adding this repo as an overlay to your Home-manager config
If you are using home-manager in a flake for your NixOS configuration, simply add the following to your flake.nix input

#+BEGIN_SRC nix
  custom-nixpkgs.url = "github:Open-Systems-Innovation/custom-nixpkgs";
#+END_SRC

And in your home-manager file, add the following

#+BEGIN_SRC nix
  nixpkgs.overlays = [inputs.custom-nixpkgs.overlays.default];
#+END_SRC

Now you can add custom-nixpkgs to your ~home.packages~ and use them in local flakes.

* Acknowledgments
Special thanks to [drupol](https://github.com/drupol/my-own-nixpkgs) for coming up with this idea.

